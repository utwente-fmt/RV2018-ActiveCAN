module JML.SkelJml where

-- Haskell module generated by the BNF converter

import JML.AbsJml
import ErrM
type Result = Err String

failure :: Show a => a -> Result
failure x = Bad $ "Undefined case: " ++ show x

transIdJml :: IdJml -> Result
transIdJml x = case x of
  IdJml string -> failure x
transSymbols :: Symbols -> Result
transSymbols x = case x of
  Symbols string -> failure x
transJML :: JML -> Result
transJML x = case x of
  JMLAnd jml1 jml2 -> failure x
  JMLOr jml1 jml2 -> failure x
  JMLImp jml1 jml2 -> failure x
  JMLIff jml1 jml2 -> failure x
  JMLForallRT type_ idjml bodyf -> failure x
  JMLExistsRT type_ idjml bodyf -> failure x
  JMLPar jml -> failure x
  JMLNeg symbols jml -> failure x
  JMLExp expressions -> failure x
transBodyF :: BodyF -> Result
transBodyF x = case x of
  BodyF rangeterm -> failure x
transRangeTerm :: RangeTerm -> Result
transRangeTerm x = case x of
  RangeTerm jml1 jml2 -> failure x
  OnlyRange jml -> failure x
transType :: Type -> Result
transType x = case x of
  Type idjml -> failure x
transExpression :: Expression -> Result
transExpression x = case x of
  Exp idjml -> failure x
  ExpS symbols -> failure x
  ExpRes -> failure x
  ExpOld jml -> failure x
  ExpTypeOf jml -> failure x
  ExpType jml -> failure x
  ExpInv jml -> failure x
  ExpDls content -> failure x
  ExpMC methodcall -> failure x
  ExpPar expressions -> failure x
transMethodCall :: MethodCall -> Result
transMethodCall x = case x of
  MC idjml argss -> failure x
transArgs :: Args -> Result
transArgs x = case x of
  ArgsId idjml -> failure x
  ArgsS string -> failure x
transContent :: Content -> Result
transContent x = case x of
  ContentStr string -> failure x
  ContentId idjml -> failure x
  ContentMC methodcall -> failure x

